src_php(
   (file_name , test),
   (file_extension , php),
   (file_path , .),
   source(
      php(
         #(
           d√©but du test
           =======================================================================================
         ),
         affecte(
            $a,
            appelf(
               nomf(realpath),
               p(
                  appelf(
                     nomf(dirname),
                     p(
                        appelf(
                           nomf(dirname),
                           p(appelf(nomf(dirname) , p(__FILE__)))
                        )
                     )
                  )
               )
            )
         ),
         appelf(nomf(require) , p(concat($a , '/phplib/vendor/autoload.php'))),
         appelf(nomf(use) , p('PhpParser\\Error')),
         appelf(nomf(use) , p('PhpParser\\NodeDumper')),
         appelf(nomf(use) , p('PhpParser\\ParserFactory')),
         fonction(
            definition(nom(recupererAstDePhp) , adresseArgument($data)),
            contenu(
               affecte(
                  $parser,
                  appelf(
                     element(
                        new(appelf(nomf(ParserFactory)))
                     ),
                     nomf(createForNewestSupportedVersion)
                  )
               ),
               essayer(
                  faire(
                     affecte(
                        $ast,
                        appelf(
                           element($parser),
                           nomf(parse),
                           p(tableau(nomt(data) , p('input') , p('texteSource')))
                        )
                     ),
                     affecte(tableau(nomt(data) , p('value')) , appelf(nomf(json_encode) , p($ast))),
                     affecte(tableau(nomt(data) , p('status')) , 'OK')
                  ),
                  sierreur(
                     err(Error , $error),
                     faire(
                        affecte(tableau(nomt(data) , p('messages') , p()) , appelf(element($error) , nomf(getMessage))),
                        revenir()
                     )
                  )
               )
            )
         ),
         #(
           =================================================================================
           fin du test
         )
      )
   ),
   #(
     concatFichier(testConcat1.js),
     concatFichier(testConcat2.js)
   )
)