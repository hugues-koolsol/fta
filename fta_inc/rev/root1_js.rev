src_javascript(
  ( file_name , core1 ),
  ( file_extension , js ),
  ( file_path , . ),
  ( strict() ),
  source(
    declare( globale_LangueCourante , 'fr' ),
    fonction(
      definition(
        nom(fta1),
        argument(o),
        argument(exitOnLevelError)
      ),
      contenu(
        // =========================
        // les chaines de caractères
        // =========================
        declare( t , '' ) , declare( texte , '' ) , declare( commentaire , '' ),
        declare( c , '' ) , declare( c1 , '' ) , declare( c2 , '' ) , declare( cst , '' ),
        declare( commentaireAvant , '' ) , declare( commentaireApres , '' ),
        declare( commentaireDedans , '' ),
        declare( typCommApNett , '' ) , declare( typCommDeNett , '' ),
        declare( typCommAvNett , '' ),
        declare( CommApNett , '' ) , declare( CommDeNett , '' ),
        declare( CommAvNett , '' ),
        // =========================
        // les entiers
        // =========================
        declare( i , 0 ) , declare( j , 0 ) , declare( k , 0 ) , declare( l , 0 ),
        declare( indice , 0 ) , declare( niveau , 0 ),
        declare( niveauBloc , 0 ),
        declare( premier , 0 ),
        declare( dernier , 0 ),
        declare( debutIgnore , 0 ),
        declare( finIgnore , 0 ),
        declare( numeroLigne , 0 ),
        declare( parentId , 0 ),
        declare( nombreEnfants , 0 ),
        declare( numEnfant , 0 ),
        declare( profondeur , 0 ),
        declare( posOuvPar , 0 ),
        declare( posFerPar , 0 ),
        declare( numLigneFermeturePar , 0 ),
        // =========================
        // les booléens
        // =========================
        declare( dansCst , false ) , declare( dansTexte , false ),
        declare( dansCommentaireLigne , false ) , declare( dansCommentaireBloc , false ),
        declare( constanteQuotee , false ) , declare( faireCommentaire , true ),
        declare( levelError , false ) , declare( dansIgnore , false ),
        // =========================
        // les autres
        // =========================
        declare( T , new( appelf( n(Array) ) ) ),
        // =======================================================================
        // initialisation du tableau contenant le source structuré en arborescence
        // =======================================================================
        appelf(
          n(T.push),
          p(
            appelf(
              n(array),
              p(0),
              p(texte),
              p('INIT'),
              p(-1),
              p(constanteQuotee),
              p(premier) , p(dernier),
              p(commentaireAvant) , p(commentaireApres) , p(commentaireDedans),
              p(0) , p(0) , p(0) , p(0),
              p(numLigneFermeturePar),
              p(profondeur),
              p(typCommApNett) , p(typCommDeNett) , p(typCommAvNett),
              p(CommApNett) , p(CommDeNett) , p(CommAvNett),
              p(posOuvPar) , p(posFerPar)
            )
          )
        ),
        declare( l01 , o.length ),

        // ====================================================================
        // ====================================================================
        // boucle principale sur tous les caractères du texte passé en argument
        // ====================================================================
        // ====================================================================

        boucle(
          initialisation( affecte( i , 0 ) ),
          condition( inf( i , l01 ) ),
          increment( affecte( i , i+1 ) ),
          faire(
            affecte( c , appelf( n(o.substr) , p(i) , p(1) ) ),
            choix(
              si(
                condition( ( egal( dansCst , true ) ) ),
                alors(
                  choix(
                    si(
                      condition( ( egal( c , '\'' ) ) ),
                      alors(
                        choix(
                          si(
                            condition( ( diff( i , l01-1 ) ) ),
                            alors(
                              affecte( c1 , appelf( n(o.substr) , p(i+1) , p(1) ) ),
                              choix(
                                si(
                                  condition(
                                    ( egal( c1 , ',' ) ),
                                    ou( egal( c1 , '\t' ) ),
                                    ou( egal( c1 , '\n' ) ),
                                    ou( egal( c1 , '\r' ) ),
                                    ou( egal( c1 , '/' ) ),
                                    ou( egal( c1 , ' ' ) ),
                                    ou( egal( c1 , ')' ) )
                                  ),
                                  alors(
                                    affecte( dernier , i-1 )
                                  )
                                ),
                                sinon(
                                  alors(
                                    affecte(
                                      temp,
                                      obj(
                                        ( status , false ),
                                        ( value , T ),
                                        ( message , 'apres une constante, il doit y avoir un caractère d\'echappement' )
                                      )
                                    ),
                                    revenir(
                                      appelf( n(logerreur) , p(temp) )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        affecte( dansCst , false ),
                        affecte( indice , indice+1 ),
                        affecte( constanteQuotee , true ),
                        choix(
                          si(
                            condition(
                              ( egal( dansIgnore , true ) )
                            ),
                            alors(
                              choix(
                                si(
                                  condition(
                                    ( egal( texte , '' ) )
                                  ),
                                  alors(
                                    appelf(
                                      r(commentaireAvant),
                                      n(o.substr),
                                      p(debutIgnore),
                                      p(premier-debutIgnore)
                                    )
                                  )
                                ),
                                sinon(
                                  alors(
                                    appelf(
                                      r(commentaireAvant),
                                      n(o.substr),
                                      p(debutIgnore),
                                      p(premier-debutIgnore-1)
                                    )
                                  )
                                )
                              ),
                              affecte( dansIgnore , false )
                            )
                          )
                        ),
                        appelf( r(numeroLigne) , n(calculNumLigne) , p(o) , p(premier) ),
                        appelf(
                          n(T.push),
                          p(
                            appelf(
                              n(array),
                              p(indice),
                              p(texte),
                              p('c'),
                              p(niveau),
                              p(constanteQuotee),
                              p(premier) , p(dernier),
                              p(commentaireAvant) , p(commentaireApres) , p(commentaireDedans),
                              p(parentId) , p(nombreEnfants) , p(numEnfant) , p(numeroLigne),
                              p(numLigneFermeturePar),
                              p(profondeur),
                              p(typCommApNett) , p(typCommDeNett) , p(typCommAvNett),
                              p(CommApNett) , p(CommDeNett) , p(CommAvNett),
                              p(posOuvPar) , p(posFerPar)
                            )
                          )
                        ),
                        affecte( texte , '' ),
                        affecte( commentaireAvant , '' ),
                        affecte( constanteQuotee , false )
                      )
                    ),
                    sinonsi(
                      condition(
                        ( egal( c , '\\' ) )
                      ),
                      alors(
                        choix(
                          si(
                            condition( ( egal( i , l01-1 ) ) ),
                            alors(
                              affecte(
                                temp,
                                obj(
                                  ( status , false ),
                                  ( value , T ),
                                  ( message , 'un antislash ne doit pas terminer une fonction' )
                                )
                              ),
                              revenir(
                                appelf( n(logerreur) , p(temp) )
                              )
                            )
                          ),
                          sinon(
                            alors(
                              affecte( c1 , appelf( n(o.substr) , p(i+1) , p(1) ) ),
                              choix(
                                si(
                                  condition(
                                    ( egal( c1 , '\\' ) ),
                                    ou( egal( c1 , '\'' ) )
                                  ),
                                  alors(
                                    choix(
                                      si(
                                        condition(
                                          ( egal( texte , '' ) )
                                        ),
                                        alors(
                                          affecte( premier , i )
                                        )
                                      )
                                    ),
                                    affecte( texte , appelf( n(concat) , p(texte) , p(c1) ) ),
                                    affecte( i , i+1 )
                                  )
                                ),
                                sinon(
                                  alors(
                                    choix(
                                      si(
                                        condition(
                                          ( egal( c1 , 'n' ) ),
                                          ou( egal( c1 , 't' ) ),
                                          ou( egal( c1 , 'r' ) )
                                        ),
                                        alors(
                                          choix(
                                            si(
                                              condition(
                                                ( egal( texte , '' ) )
                                              ),
                                              alors(
                                                affecte( premier , i )
                                              )
                                            )
                                          ),
                                          affecte( texte , appelf( n(concat) , p('\\') , p(c1) ) ),
                                          affecte( i , i+1 )
                                        )
                                      ),
                                      sinon(
                                        alors(
                                          affecte(
                                            temp,
                                            obj(
                                              ( status , false ),
                                              ( value , T ),
                                              ( message , 'un antislash doit être suivi par un autre antislash ou un apostrophe' )
                                            )
                                          ),
                                          revenir(
                                            appelf( n(logerreur) , p(temp) )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        )
                      )
                    ),
                    sinon(
                      alors(
                        choix(
                          si(
                            condition(
                              ( egal( texte , '' ) )
                            ),
                            alors(
                              affecte( premier , i )
                            )
                          )
                        ),
                        affecte( texte , appelf( n(concat) , p(texte) , p(c) ) )
                      )
                    )
                  )
                )
              ),
              sinonsi(
                condition( ( egal( dansCommentaireLigne , true ) ) ),
                alors(
                  boucle(
                    initialisation( affecte( j , i ) ),
                    condition( inf( j , l01 ) ),
                    increment( affecte( j , j+1 ) ),
                    faire(
                      affecte( c1 , appelf( n(o.substr) , p(j) , p(1) ) ),
                      choix(
                        si(
                          condition(
                            ( egal( c1 , '\n' ) ),
                            ou( egal( c1 , '\r' ) )
                          ),
                          alors(
                            affecte( dansCommentaireLigne , false ),
                            affecte( i , j ),
                            break()
                          )
                        )
                      )
                    )
                  )
                )
              ),
              sinonsi(
                condition( ( egal( dansCommentaireBloc , true ) ) ),
                alors(
                  boucle(
                    initialisation( affecte( j , i ) ),
                    condition( inf( j , l01-1 ) ),
                    increment( affecte( j , j+1 ) ),
                    faire(
                      affecte( c1 , appelf( n(o.substr) , p(j) , p(1) ) ),
                      affecte( c2 , appelf( n(o.substr) , p(j+1) , p(1) ) ),
                      choix(
                        si(
                          condition(
                            ( egal( c1 , '/' ) ),
                            et( egal( c1 , '*' ) ),
                            et(
                              ( egal( i , 0 ) ),
                              ou(
                                egal( appelf( n(o.substr) , p(j-1) , p(1) ) , '\r' )
                              ),
                              ou(
                                egal( appelf( n(o.substr) , p(j-1) , p(1) ) , '\n' )
                              )
                            )
                          ),
                          alors(
                            affecte( niveauBloc , niveauBloc+1 )
                          )
                        ),
                        sinonsi(
                          condition(
                            ( egal( c1 , '*' ) ),
                            et( egal( c1 , '/' ) ),
                            et(
                              (
                                egal( appelf( n(o.substr) , p(j-1) , p(1) ) , '\r' )
                              ),
                              ou(
                                egal( appelf( n(o.substr) , p(j-1) , p(1) ) , '\n' )
                              )
                            )
                          ),
                          alors(
                            affecte( niveauBloc , niveauBloc-1 )
                          )
                        )
                      ),
                      choix(
                        si(
                          condition(
                            ( egal( niveauBloc , 0 ) )
                          ),
                          alors(
                            affecte( dansCommentaireBloc , false ),
                            affecte( i , j+1 ),
                            break()
                          )
                        )
                      )
                    )
                  )
                )
              ),
              sinon(
                alors(
                  choix(
                    si(
                      condition(
                        ( egal( c , '(' ) )
                      ),
                      alors(
                        affecte( posOuvPar , i ),
                        choix(
                          si(
                            condition(
                              ( egal( dansIgnore , true ) )
                            ),
                            alors(
                              choix(
                                si(
                                  condition(
                                    ( egal( texte , '' ) )
                                  ),
                                  alors(
                                    affecte(
                                      commentaireAvant,
                                      appelf(
                                        n(o.substr),
                                        p(debutIgnore),
                                        p(i-debutIgnore)
                                      )
                                    )
                                  )
                                ),
                                sinon(
                                  alors(
                                    affecte(
                                      commentaireAvant,
                                      appelf(
                                        n(o.substr),
                                        p(debutIgnore),
                                        p(premier-debutIgnore)
                                      )
                                    )
                                  )
                                )
                              ),
                              affecte( dansIgnore , faux )
                            )
                          )
                        ),
                        affecte( indice , indice+1 ),
                        choix(
                          si(
                            condition(
                              non(
                                egal( texte , '' )
                              )
                            ),
                            alors(
                              affecte(
                                numeroLigne,
                                appelf(
                                  n(calculNumLigne),
                                  p(o),
                                  p(i)
                                )
                              )
                            )
                          ),
                          sinon(
                            alors(
                              affecte(
                                numeroLigne,
                                appelf(
                                  n(calculNumLigne),
                                  p(o),
                                  p(premier)
                                )
                              )
                            )
                          )
                        ),
                        appelf(
                          n(T.push),
                          p(
                            appelf(
                              n(array),
                              p(indice),
                              p(texte),
                              p('c'),
                              p(niveau),
                              p(constanteQuotee),
                              p(premier) , p(dernier),
                              p(commentaireAvant) , p(commentaireApres) , p(commentaireDedans),
                              p(parentId) , p(nombreEnfants) , p(numEnfant) , p(numeroLigne),
                              p(numLigneFermeturePar),
                              p(profondeur),
                              p(typCommApNett) , p(typCommDeNett) , p(typCommAvNett),
                              p(CommApNett) , p(CommDeNett) , p(CommAvNett),
                              p(posOuvPar) , p(posFerPar)
                            )
                          )
                        ),
                        boucle(
                          initialisation( affecte( i , T.length-1 ) ),
                          condition( sup( j , 0 ) ),
                          increment( affecte( j , j-1 ) ),
                          faire(
                            affecte( l , T[j][3] ),
                            boucle(
                              initialisation( affecte( k , j ) ),
                              condition( supeg( k , 0 ) ),
                              increment( affecte( k , k-1 ) ),
                              faire(
                                affecte( T[j][10] , k ),
                                break()
                              )
                            )
                          )
                        ),
                        affecte( niveau , niveau+1 ),
                        affecte( texte , '' ),
                        affecte( commentaireAvant , '' ),
                        affecte( commentaireApres , '' ),
                        affecte( dansCst , faux ),
                        affecte( dansTexte , faux ),
                        affecte( dansCommentaireLigne , faux ),
                        affecte( dansCommentaireBloc , faux )
                      )
                    ),
                    sinonsi(
                      condition(
                        ( egal( c , ')' ) )
                      ),
                      alors(
                        affecte( posFerPar , i ),
                        affecte( faireCommentaire , vrai ),
                        choix(
                          si(
                            condition(
                              ( diff( texte , '' ) )
                            ),
                            alors(
                              choix(
                                si(
                                  condition(
                                    // une constante est le dernier paramètre d'une fonction 
                                    // et ne comporte pa de virgule, ex : a((b c))
                                    ( egal( dansIgnore , true ) )
                                  ),
                                  alors(
                                    appelf(
                                      n(o.substr),
                                      r(commentaireAvant),
                                      p(debutIgnore),
                                      p(premier-debutIgnore)
                                    )
                                  )
                                )
                              ),
                              affecte( indice , indice+1 ),
                              appelf(
                                n(calculNumLigne),
                                r(numeroLigne),
                                p(o),
                                p(premier)
                              ),
                              appelf(
                                n(T.push),
                                p(
                                  appelf(
                                    n(array),
                                    p(indice),
                                    p(texte),
                                    p('c'),
                                    p(niveau),
                                    p(constanteQuotee),
                                    p(premier) , p(dernier),
                                    p(commentaireAvant) , p(commentaireApres) , p(commentaireDedans),
                                    p(parentId) , p(nombreEnfants) , p(numEnfant) , p(numeroLigne),
                                    p(numLigneFermeturePar),
                                    p(profondeur),
                                    p(typCommApNett) , p(typCommDeNett) , p(typCommAvNett),
                                    p(CommApNett) , p(CommDeNett) , p(CommAvNett),
                                    p(posOuvPar) , p(posFerPar)
                                  )
                                )
                              ),
                              affecte( texte , '' ),
                              affecte( commentaireAvant , '' ),
                              affecte( faireCommentaire , faux )
                            )
                          )
                        ),
                        choix(
                          si(
                            condition(
                              ( egal( dansIgnore , vrai ) ),
                              et( egal( faireCommentaire , vrai ) )
                            ),
                            alors(
                              affecte( a , 1 ),
                              choix(
                                si(
                                  condition(
                                    ( sup( niveau , T[indice][3] ) )
                                  ),
                                  alors(
                                    appelf(
                                      n(o.substr),
                                      r(commentaireDedans),
                                      p(debutIgnore),
                                      p(i-debutIgnore)
                                    ),
                                    affecte( T[indice][9] , commentaireDedans ),
                                    affecte( commentaireDedans , '' ),
                                    affecte( dansIgnore , false )
                                  )
                                ),
                                sinon(
                                  alors(
                                    boucle(
                                      initialisation( affecte( k , indice ) ),
                                      condition( sup( k , 0 ) ),
                                      increment( affecte( k , k-1 ) ),
                                      faire(
                                        choix(
                                          si(
                                            condition(
                                              ( egal( T[k][3] , niveau ) )
                                            ),
                                            alors(
                                              appelf(
                                                n(o.substr),
                                                r(commentaireApres),
                                                p(debutIgnore),
                                                p(i-debutIgnore)
                                              ),
                                              affecte( T[k][8] , commentaireApres ),
                                              affecte( commentaireApres , '' ),
                                              affecte( dansIgnore , false ),
                                              break()
                                            )
                                          )
                                        )
                                      )
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        choix(
                          si(
                            condition(
                              // si le dernier argument d'une fonction est une constante, 
                              // il faut remonter pour chercher le commentaire apres

                              ( egal( T[indice][2] , 'c' ) ),
                              et( egal( niveau , T[indice][3] ) )
                            ),
                            alors(
                              choix(
                                si(
                                  condition(
                                    ( egal( T[indice][4] , vrai ) )
                                  ),
                                  alors(
                                    affecte( k , T[indice][6]+2 )
                                  )
                                ),
                                sinon(
                                  alors( affecte( k , T[indice][6]+1 ) )
                                )
                              ),
                              choix(
                                si(
                                  condition(
                                    ( inf( k , i ) )
                                  ),
                                  alors(
                                    appelf(
                                      n(o.substr),
                                      r(commentaireApres),
                                      p(k),
                                      p(i-k)
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ),
                        affecte( a , 1 ),
                        appelf(
                          n(calculNumLigne),
                          r(numeroLigne),
                          p(o),
                          p(i)
                        ),
                        // recherche du numLiParent
                        boucle(
                          initialisation( affecte( j , indice ) ),
                          condition( sup( j , 0 ) ),
                          increment( affecte( j , j-1 ) ),
                          faire(
                            choix(
                              si(
                                condition(
                                  ( egal( T[j][3] , niveau-1 ) )
                                ),
                                alors(
                                  affecte( T[j][14] , numeroLigne ),
                                  break()
                                )
                              )
                            )
                          )
                        ),
                        affecte( niveau , niveau-1 )
                        //
                        // maj de la position de fermeture de la parenthèse
                      )

/*

    niveau--;
    for(j=indice;j>=0;j--){
     if(T[j][3]==niveau && T[j][2]=='f' ){
      T[j][23]=posFerPar;
      break;
     }
    }
    posFerPar=0;


    dansCst=false;
    dansTexte=false;
    dansCommentaireLigne=false;
    dansCommentaireBloc=false;
*/                      
                    ),
                    sinonsi(
                      condition( ( egal( c , '\\' ) ) ),
                      alors( affecte( a , 1 ) )
                    ),
                    sinonsi(
                      condition( ( egal( c , '\'' ) ) ),
                      alors( affecte( a , 1 ) )
                    ),
                    sinonsi(
                      condition( ( egal( c , '/' ) ) ),
                      alors( affecte( a , 1 ) )
                    ),
                    sinonsi(
                      condition( ( egal( c , ',' ) ) ),
                      alors( affecte( a , 1 ) )
                    ),
                    sinonsi(
                      condition(
                        ( egal( c , ' ' ) ),
                        ou( egal( c , '\t' ) ),
                        ou( egal( c , '\r' ) ),
                        ou( egal( c , '\n' ) )
                      ),
                      alors( affecte( a , 1 ) )
                    ),
                    sinon(
                      alors( affecte( a , 1 ) )
                    )
                  )
                )
              )
            )
          )
        )
/*        
        affecteFonction(
          r.onreadystatechange,
          contenu(
            essayer(
              faire(
                // instructions
              ),
              sierreur(
                e,
                faire(
                  // instructions
                )
              )
            )
          )
        ),
*/        
      )
    )
  )
)