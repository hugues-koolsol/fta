src_php(
   (file_name , index_source_test),
   (file_extension , php),
   (file_path , .),
   source(
      php(
         definir(BNF , appelf(n(basename) , p(__FILE__))),
         appelf(n(require_once) , p('aa_include.php')),
         appelf(n(session_start)),
         appelf(n(start_session_messages)),
         #(
            // ======================================================== 
            // affichage de l'entête html 
         ),
         affecte($o1 , ''),
         affecte($a , array(('title' , 'accueil') , ('description' , 'accueil'))),
         appelf(r($o1) , n(html_header1) , p($a)),
         appelf(
            n(concat),
            r($o1),
            p($o1),
            p(appelf(n(session_messages)))
         ),
         #(//      on imprime le texte ...,),
         appelf(n(print) , p($o1)),
         #(//  ... puis on le reinitialise,),
         affecte($o1 , '')
      ),
      #(
         // =====================================================
         // avec un peu de html
         // =====================================================
      ),
      html(
         #(// =====================================================),
         table(
            tr(
               td(button((onclick , 'charger(\'source4.txt\')') , 'source4') , button((onclick , 'charger(\'source5.txt\')') , 'source5') , button((onclick , 'charger(\'source6.txt\')') , 'source6')),
               td(
                  textarea((id , zonesource) , (cols , 100) , (rows , 60)),
                  div(button((onclick , 'enregistrer()') , 'Enregistrer'))
               ),
               td((style , 'vertical-align: text-top;') , textarea((id , normalise) , (cols , 100) , (rows , 10)))
            ),
            tr(
               td((colspan , 3) , div((id , message_erreur)))
            )
         ),
         #(
            // =====================================================
            // et un javascript dans le html
            // =====================================================
         ),
         script(
            (type , 'text/javascript'),
            (data-lang , 'fr'),
            source(
               #(
                  // ====================================================================
                  // fonction met la zone normalisée à la même hauteur que la zone source
                  // ====================================================================
               ),
               fonction(
                  definition(nom(memeHauteur) , argument(normalise) , argument(source)),
                  contenu(
                     declare(zoneSource , null),
                     declare(zonenormalisée , null),
                     appelf(r(zoneSource) , n(document.getElementById) , p(source)),
                     appelf(r(zonenormalisée) , n(document.getElementById) , p(normalise)),
                     declare(bou , null),
                     appelf(r(bou) , n(zoneSource.getBoundingClientRect) , p()),
                     declare(t , ''),
                     appelf(
                        r(t),
                        n(concat),
                        p(bou.height),
                        p('px')
                     ),
                     affecte(zonenormalisée.style.height , t)
                  )
               ),
               #(
                  // =====================================================
                  // fonction qui ajuste la largeur d'une zone de textarea
                  // =====================================================
               ),
               fonction(
                  definition(nom(ajusteTailleTextareaContenantSource) , argument(nomZone)),
                  contenu(
                     declare(zoneSource , null),
                     appelf(r(zoneSource) , n(document.getElementById) , p(nomZone)),
                     declare(tab , []),
                     appelf(r(tab) , n(zoneSource.value.split) , p('\n')),
                     declare(i , 0),
                     declare(largeur , 0),
                     boucle(
                        initialisation(affecte(i , 0)),
                        condition(inf(i , tab.length)),
                        increment(affecte(i , i+1)),
                        faire(
                           choix(
                              si(
                                 condition((sup(tab[i].length , largeur))),
                                 alors(affecte(largeur , tab[i].length))
                              )
                           )
                        )
                     ),
                     affecte(largeur , largeur+5),
                     choix(
                        si(
                           condition((sup(largeur , 100)) , ou(infeg(largeur , 0))),
                           alors(affecte(largeur , 100))
                        )
                     ),
                     affecte(zoneSource.cols , largeur)
                  )
               ),
               #(
                  // ==============================================
                  // fonction qui convertit et enregistre le source
                  // ==============================================
               ),
               fonction(
                  definition(nom(enregistrer)),
                  contenu(
                     #(
                        // =========================
                        // raz de la zone de message
                     ),
                     declare(zoneMessageErreur , null),
                     appelf(r(zoneMessageErreur) , n(document.getElementById) , p('message_erreur')),
                     affecte(zoneMessageErreur.innerHTML , ''),
                     #(
                        // ===================================================
                        // déclaration et affectation des zones de l'interface
                     ),
                     declare(zoneNormalisée , null),
                     declare(zoneSource , null),
                     appelf(r(zoneNormalisée) , n(document.getElementById) , p('normalise')),
                     appelf(r(zoneSource) , n(document.getElementById) , p('zonesource')),
                     #(
                        // ===============================================================
                        // on essaie de reconstruire la fonction pour détecter des erreurs
                     ),
                     declare(testSourceReconstruit , {}),
                     appelf(r(testSourceReconstruit) , n(compareSourceEtReconstruit) , p(zoneSource.value)),
                     #(
                        // =============================================================
                        // conversion de la fonction en javascript 
                        // en déclenchant une erreur si il y a une erreure de parenthese
                     ),
                     declare(arr , {}),
                     appelf(
                        r(arr),
                        n(functionToArray),
                        p(zoneSource.value),
                        p(vrai)
                     ),
                     choix(
                        si(
                           condition((egal(arr.status , vrai))),
                           alors(
                              #(
                                 // =============================================================
                                 // si pas d'erreur on construit le source normalise
                              ),
                              declare(sourceNormalisé , {}),
                              appelf(
                                 r(sourceNormalisé),
                                 n(arrayToFunctNormalize),
                                 p(arr.value),
                                 p(vrai)
                              ),
                              choix(
                                 si(
                                    condition((egal(sourceNormalisé.status , vrai))),
                                    alors(
                                       affecte(appelf(n(document.getElementById) , p('normalise') , prop(value)) , sourceNormalisé.value),
                                       appelf(n(ajusteTailleTextareaContenantSource) , p('normalise')),
                                       appelf(n(memeHauteur) , p('normalise') , p('zonesource')),
                                       appelf(
                                          r(arr),
                                          n(writePhpFile),
                                          p(zoneSource),
                                          p(arr)
                                       ),
                                       choix(
                                          si(
                                             condition((egal(arr.status , faux))),
                                             alors(appelf(n(console.log) , p(arr)))
                                          )
                                       )
                                    )
                                 )
                              )
                           )
                        ),
                        sinon(
                           alors(
                              choix(
                                 si(
                                    condition(
                                       (
                                          (arr.levelError),
                                          et((egal(arr.levelError , vrai)))
                                       ),
                                       ou(
                                          (
                                             (arr.message),
                                             et((diff(arr.message , '')))
                                          )
                                       )
                                    ),
                                    alors(
                                       appelf(
                                          r(zoneMessageErreur.innerHTML),
                                          n(concat),
                                          p(zoneMessageErreur.innerHTML),
                                          p('\n'),
                                          p(arr.message)
                                       )
                                    )
                                 )
                              ),
                              appelf(
                                 r(sourceNormalisé),
                                 n(arrayToFunctNormalize),
                                 p(arr.value),
                                 p(vrai)
                              ),
                              choix(
                                 si(
                                    condition((egal(sourceNormalisé.status , vrai))),
                                    alors(
                                       affecte(appelf(n(document.getElementById) , p('normalise') , prop(value)) , srcNormalise.value),
                                       appelf(n(ajusteTailleTextareaContenantSource) , p('normalise')),
                                       appelf(n(memeHauteur) , p('normalise') , p('zonesource'))
                                    )
                                 )
                              )
                           )
                        )
                     )
                  )
               ),
               #(
                  // ========================================================
                  // fonction appelée après le chargement du fichier source
                  // ========================================================
               ),
               fonction(
                  definition(nom(afficherFichierSource) , argument(source)),
                  contenu(
                     choix(
                        si(
                           condition(
                              (source.nomZone),
                              et((egal(source.status , vrai)))
                           ),
                           alors(
                              affecte(appelf(n(document.getElementById) , p(source.nomZone) , prop(value)) , source.value),
                              appelf(n(ajusteTailleTextareaContenantSource) , p(source.nomZone))
                           )
                        ),
                        sinon(
                           alors(appelf(n(console.log) , p(source)))
                        )
                     )
                  )
               ),
               #(
                  // =============================================================================
                  // fonction appelée quand on clique sur un bouton pour charger un fichier source
                  // =============================================================================
               ),
               fonction(
                  definition(nom(charger) , argument(nomsource)),
                  contenu(
                     affecte(appelf(n(document.getElementById) , p('normalise') , prop(value)) , ''),
                     appelf(
                        n(chargerFichierSource),
                        p(nomsource),
                        p(afficherFichierSource),
                        p('zonesource')
                     )
                  )
               )
            )
         )
      ),
      php(
         affecte(
            $a,
            array(
               ('js' , array(('js/php.js') , ('js/javascript.js') , ('js/html.js')))
            )
         ),
         appelf(
            n(concat),
            r($o1),
            p($o1),
            p(appelf(n(html_footer1) , p($a)))
         ),
         appelf(n(print) , p($o1)),
         #(// ... puis on le reinitialise),
         affecte($o1 , '')
      ),
      #(// fin du php)
   )
)